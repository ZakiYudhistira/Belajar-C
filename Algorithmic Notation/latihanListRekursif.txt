countPos(l:list) -> integer
KAMUS LOKAL

ALGORITMA
if l = NIL then
    -> 0
else
    if l.info > 0 then
        -> 1 + countPos(l.next)
    else
        -> countPos(l.next)

sumPos(l:list) -> integer
KAMUS LOKAL

ALGORITMA
if l = NIL then
    -> 0
else
    if l.info > 0 then
        -> l.info + sumPos(l.next)
    else
        -> countPos(l.next)

isMember(l : list, x : Eltype) -> boolean
KAMUS LOKAL

ALGORITMA
if l = NIL then
    -> false
else
    if l.info = x then
        -> true
    else
        -> isMember(l.next, x)

isEqual(l1,l2 : list) -> boolean
KAMUS LOKAL

ALGORITMA
if l1 = NIL or l2 = NIL then
    -> l1 = NIL and l2 = NIL
else
    if l1.info = l2.info then
        -> isEqual(l1.next, l2.next)
    else
        -> false

extremes(input l : list, output min,max : integer)
KAMUS LOKAL

ALGORITMA
if l.next = NIL then
    min <- l.info
    max <- l.info
else
    extremes(l.next, min1, max1)
    if l.info < min1 then
        min <- l.info
    else
        min <- min1
    if l.info > max1 then
        max <- l.info
    else
        max <- max1

listPlus(input l1, l2, : List, output l3 : List)
KAMUS LOKAL
elmt : Eltype

ALGORITMA
if l1 = NIL and l2 = NIL then
    l3 = NIL
else
    listPlus(l1.next, l2.next, lTemp)
    elmt <- l1.info + l2.info
    l3 <- concat(elmt, ltemp)